# authapp/tasks.py
import datetime
from django.utils import timezone
from django.conf import settings
from diary.models import GlucoseMeasurement, Event, Medication, StressNote
import logging
import json

logger = logging.getLogger(__name__)

# –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
_openai_client = None

def get_openai_client():
    """–ü–æ–ª—É—á–∏—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π API –∫–ª—é—á–∞"""
    global _openai_client
    
    if _openai_client is None:
        from openai import OpenAI
        import os
        
        api_key = getattr(settings, 'OPENAI_API_KEY', None)
        
        if not api_key:
            api_key = os.getenv("OPENAI_API_KEY")
        
        if not api_key or api_key == "sk-proj-–≤–∞—à-–∫–ª—é—á":
            logger.error("OPENAI_API_KEY not found or is placeholder value")
            raise ValueError(
                "OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. "
                "–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª –∏–ª–∏ settings.py"
            )
        
        logger.info(f"Initializing OpenAI client with key: {api_key[:20]}...")
        _openai_client = OpenAI(api_key=api_key)
    
    return _openai_client


def get_comprehensive_analysis(employee):
    """
    –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ù–ï–î–ï–õ–Æ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º —Ç—Ä–µ–Ω–¥–∞ –≥–ª—é–∫–æ–∑—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
    {
        "analysis": "–¢–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç GPT",
        "chart_data": {
            "2025-10-06": 5.2,
            "2025-10-07": 5.5,
            "2025-10-08": 5.8,
            "2025-10-09": 5.6,
            "2025-10-10": 5.4,
            "2025-10-11": 5.3,
            "2025-10-12": 5.7
        }
    }
    """
    try:
        logger.info(f"=" * 50)
        logger.info(f"Starting comprehensive analysis for employee {employee.id} ({employee.user.username})")
        
        now = timezone.now()
        start_week = now - datetime.timedelta(days=7)  # ‚Üê –ò–ó–ú–ï–ù–ï–ù–û: –Ω–µ–¥–µ–ª—è –≤–º–µ—Å—Ç–æ –º–µ—Å—è—Ü–∞
        
        logger.info(f"Date range: {start_week.strftime('%Y-%m-%d')} to {now.strftime('%Y-%m-%d')}")

        # 1. –°–û–ë–ò–†–ê–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –ó–ê –ù–ï–î–ï–õ–Æ
        logger.info("Collecting data from database...")
        
        glucose_qs = GlucoseMeasurement.objects.filter(
            employee=employee,
            measured_at__gte=start_week
        ).order_by("measured_at")

        events_qs = Event.objects.filter(
            employee=employee,
            start_time__gte=start_week
        ).order_by("start_time")

        meds_qs = Medication.objects.filter(
            employee=employee,
            taken_at__gte=start_week
        ).order_by("taken_at")

        stress_qs = StressNote.objects.filter(
            employee=employee,
            noted_at__gte=start_week
        ).order_by("noted_at")

        glucose_count = glucose_qs.count()
        events_count = events_qs.count()
        meds_count = meds_qs.count()
        stress_count = stress_qs.count()
        
        logger.info(f"Data collected:")
        logger.info(f"  - Glucose measurements: {glucose_count}")
        logger.info(f"  - Events: {events_count}")
        logger.info(f"  - Medications: {meds_count}")
        logger.info(f"  - Stress notes: {stress_count}")

        # 2. –§–û–†–ú–ê–¢–ò–†–£–ï–ú –î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê
        logger.info("Formatting data for analysis...")
        
        glucose_data = [{
            "date": g.measured_at.strftime("%Y-%m-%d"),
            "time": g.measured_at.strftime("%H:%M"),
            "value": float(g.value)
        } for g in glucose_qs]

        events_data = [{
            "date": e.start_time.strftime("%Y-%m-%d"),
            "time": e.start_time.strftime("%H:%M"),
            "type": e.type,
            "name": e.name,
            "desc": e.description,
            "calories": e.calories,
            "carbs": e.carbs,
            "sugars": e.sugars,
            "duration": e.duration,
            "steps": e.steps
        } for e in events_qs]

        meds_data = [{
            "date": m.taken_at.strftime("%Y-%m-%d"),
            "time": m.taken_at.strftime("%H:%M"),
            "name": m.name,
            "dosage": m.dose
        } for m in meds_qs]

        stress_data = [{
            "date": s.noted_at.strftime("%Y-%m-%d"),
            "time": s.noted_at.strftime("%H:%M"),
            "note": s.description
        } for s in stress_qs]

        logger.info(f"Data formatted successfully")

        # 3. –ü–†–û–í–ï–†–ö–ê –ù–ê –ù–ê–õ–ò–ß–ò–ï –î–ê–ù–ù–´–•
        if not glucose_data and not events_data:
            logger.warning(f"Insufficient data for employee {employee.id} - no glucose or events found")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é
            empty_forecast = {}
            for i in range(7):
                future_date = (now + datetime.timedelta(days=i+1)).strftime("%Y-%m-%d")
                empty_forecast[future_date] = None
            
            return {
                "analysis": (
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ–±–∞–≤—å—Ç–µ:\n"
                    "‚Ä¢ –ò–∑–º–µ—Ä–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≥–ª—é–∫–æ–∑—ã\n"
                    "‚Ä¢ –°–æ–±—ã—Ç–∏—è (–ø—Ä–∏—ë–º—ã –ø–∏—â–∏, —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)\n"
                    "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö\n"
                    "‚Ä¢ –ó–∞–º–µ—Ç–∫–∏ –æ —Å—Ç—Ä–µ—Å—Å–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏"
                ),
                "chart_data": empty_forecast
            }

        # 4. –ê–ù–ê–õ–ò–ó –° –û–¢–ö–õ–û–ù–ï–ù–ò–Ø–ú–ò
        logger.info("Analyzing glucose deviations...")
        
        high_glucose = [g for g in glucose_data if g["value"] > 11]
        low_glucose = [g for g in glucose_data if g["value"] < 4]

        logger.info(f"  - High glucose cases (>11): {len(high_glucose)}")
        logger.info(f"  - Low glucose cases (<4): {len(low_glucose)}")

        deviations_text = ""
        if high_glucose:
            deviations_text += f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(high_glucose)} —Å–ª—É—á–∞–µ–≤ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≥–ª—é–∫–æ–∑—ã (>11 –º–º–æ–ª—å/–ª)."
        if low_glucose:
            deviations_text += f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(low_glucose)} —Å–ª—É—á–∞–µ–≤ –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≥–ª—é–∫–æ–∑—ã (<4 –º–º–æ–ª—å/–ª)."

        # 5. –í–´–ß–ò–°–õ–Ø–ï–ú –°–†–ï–î–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ü–û –î–ù–Ø–ú
        from collections import defaultdict
        daily_glucose = defaultdict(list)
        for g in glucose_data:
            daily_glucose[g["date"]].append(g["value"])
        
        daily_averages = {
            date: round(sum(values) / len(values), 1)
            for date, values in daily_glucose.items()
        }
        
        logger.info(f"Daily averages calculated: {daily_averages}")

        # 6. –ì–ï–ù–ï–†–ò–†–£–ï–ú –î–ê–¢–´ –î–õ–Ø –ü–†–û–ì–ù–û–ó–ê (—Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π)
        forecast_dates = []
        for i in range(7):
            future_date = (now + datetime.timedelta(days=i+1)).strftime("%Y-%m-%d")
            forecast_dates.append(future_date)
        
        logger.info(f"Forecast dates: {forecast_dates}")

        # 7. –°–û–ó–î–ê–Å–ú –ü–†–û–ú–ü–¢ –î–õ–Ø OPENAI –° –ó–ê–ü–†–û–°–û–ú –ù–ê –ü–†–û–ì–ù–û–ó
        logger.info("Creating prompt for OpenAI...")
        
        prompt = f"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∏–∞–±–µ—Ç–æ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –∏ —Å–æ—Å—Ç–∞–≤—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:

                –î–ê–ù–ù–´–ï –ó–ê –ü–†–û–®–ï–î–®–£–Æ –ù–ï–î–ï–õ–Æ:

                –ì–õ–Æ–ö–û–ó–ê (–ø–æ –¥–Ω—è–º):
                {json.dumps(daily_averages, ensure_ascii=False, indent=2)}

                –î–ï–¢–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–†–ï–ù–ò–Ø:
                {glucose_data if glucose_data else "–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"}

                –°–û–ë–´–¢–ò–Ø (–µ–¥–∞, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å):
                {events_data if events_data else "–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"}

                –õ–ï–ö–ê–†–°–¢–í–ê:
                {meds_data if meds_data else "–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"}

                –°–¢–†–ï–°–°:
                {stress_data if stress_data else "–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"}

                {deviations_text}

                –ó–ê–î–ê–ß–ê:
                1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–µ–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞ –Ω–µ–¥–µ–ª—é
                2. –î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                3. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Å—Ç–∞–≤—å –ø—Ä–æ–≥–Ω–æ–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –≥–ª—é–∫–æ–∑—ã –Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö 7 –¥–Ω–µ–π: {', '.join(forecast_dates)}

                –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:

                ## üìä –ê–ù–ê–õ–ò–ó –ó–ê –ù–ï–î–ï–õ–Æ (100-150 —Å–ª–æ–≤)
                - –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —É—Ä–æ–≤–Ω—è –≥–ª—é–∫–æ–∑—ã
                - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–ª–µ–±–∞–Ω–∏–π
                - –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–≤—Ä–µ–º—è —Å—É—Ç–æ–∫, —Å–≤—è–∑—å —Å –µ–¥–æ–π/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é)

                ## üéØ –í–õ–ò–Ø–ù–ò–ï –§–ê–ö–¢–û–†–û–í (100-150 —Å–ª–æ–≤)
                - –ö–∞–∫ –ø–∏—Ç–∞–Ω–∏–µ –≤–ª–∏—è–ª–æ –Ω–∞ –≥–ª—é–∫–æ–∑—É
                - –í–ª–∏—è–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                - –í–ª–∏—è–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤

                ## üîÆ –ü–†–û–ì–ù–û–ó –ù–ê –ù–ï–î–ï–õ–Æ (50-100 —Å–ª–æ–≤)
                - –û–∂–∏–¥–∞–µ–º–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
                - –†–∏—Å–∫–∏ –∏ –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ
                - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑–∞

                ## üí° –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (150-200 —Å–ª–æ–≤)
                - –ü–∏—Ç–∞–Ω–∏–µ: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≤—Ä–µ–º—è
                - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Ç–∏–ø—ã, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å, –≤—Ä–µ–º—è
                - –†–µ–∂–∏–º –¥–Ω—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º
                - –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

                ## üìà –ü–†–û–ì–ù–û–ó –ì–õ–Æ–ö–û–ó–´ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)
                –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –≥–ª—é–∫–æ–∑—ã –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å:
                ```json{{
                "{forecast_dates[0]}": 5.5,
                "{forecast_dates[1]}": 5.8,
                "{forecast_dates[2]}": 5.6,
                "{forecast_dates[3]}": 5.9,
                "{forecast_dates[4]}": 5.7,
                "{forecast_dates[5]}": 5.4,
                "{forecast_dates[6]}": 5.6
                }}

                –í–ê–ñ–ù–û: 
                - –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ (4-11 –º–º–æ–ª—å/–ª)
                - –£—á–∏—Ç—ã–≤–∞–π –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
                - –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º JSON –±–ª–æ–∫–µ
                - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                - –ú–∞–∫—Å–∏–º—É–º 500 —Å–ª–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                """

        logger.info(f"Prompt length: {len(prompt)} characters")

        # 8. –ó–ê–ü–†–û–° –ö OPENAI
        logger.info("Calling OpenAI API...")
        
        try:
            client = get_openai_client()
            logger.info("OpenAI client initialized successfully")
            
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {
                        "role": "system",
                        "content": (
                            "–¢—ã ‚Äî –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–∏–∞–±–µ—Ç—É —Å –Ω–∞–≤—ã–∫–∞–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è. "
                            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. "
                            "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∞–π JSON –ø—Ä–æ–≥–Ω–æ–∑ –≥–ª—é–∫–æ–∑—ã –Ω–∞ 7 –¥–Ω–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            '{"YYYY-MM-DD": —á–∏—Å–ª–æ, ...}\n'
                            "–ë—É–¥—å –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º."
                        )
                    },
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7
            )
            
            logger.info("OpenAI API call completed successfully")
            
            full_response = response.choices[0].message.content.strip()
            logger.info(f"Full response length: {len(full_response)} characters")
            
        except Exception as openai_error:
            logger.error(f"OpenAI API error: {type(openai_error).__name__}")
            logger.error(f"Error details: {str(openai_error)}")
            raise

        # 9. –ò–ó–í–õ–ï–ö–ê–ï–ú –ü–†–û–ì–ù–û–ó –ò–ó –û–¢–í–ï–¢–ê
        logger.info("Extracting forecast from response...")
        
        forecast_data = {}
        analysis_text = full_response
        
        try:
            # –ò—â–µ–º JSON –±–ª–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ JSON
            patterns = [
                r'```json\s*(\{[^}]+\})\s*```',  # ```json {...} ```
                r'```\s*(\{[^}]+\})\s*```',      # ``` {...} ```
                r'\{["\']?\d{4}-\d{2}-\d{2}["\']?\s*:\s*\d+\.?\d*[^}]*\}',  # {"YYYY-MM-DD": —á–∏—Å–ª–æ}
            ]
            
            json_match = None
            for pattern in patterns:
                json_match = re.search(pattern, full_response, re.DOTALL)
                if json_match:
                    break
            
            if json_match:
                json_str = json_match.group(1) if len(json_match.groups()) > 0 else json_match.group(0)
                json_str = json_str.strip()
                
                logger.info(f"Found JSON block: {json_str[:100]}...")
                
                # –ü–∞—Ä—Å–∏–º JSON
                forecast_data = json.loads(json_str)
                
                # –£–¥–∞–ª—è–µ–º JSON –±–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
                analysis_text = full_response.replace(json_match.group(0), '').strip()
                
                logger.info(f"‚úÖ Forecast extracted successfully: {forecast_data}")
            else:
                logger.warning("Could not find forecast JSON in response")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if daily_averages:
                    avg_glucose = sum(daily_averages.values()) / len(daily_averages)
                else:
                    avg_glucose = 5.5
                
                for date in forecast_dates:
                    # –ù–µ–±–æ–ª—å—à–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –≤–æ–∫—Ä—É–≥ —Å—Ä–µ–¥–Ω–µ–≥–æ
                    import random
                    variation = random.uniform(-0.5, 0.5)
                    forecast_data[date] = round(avg_glucose + variation, 1)
                
                logger.info(f"Generated default forecast: {forecast_data}")
        
        except json.JSONDecodeError as e:
            logger.error(f"Failed to parse forecast JSON: {e}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            if daily_averages:
                avg_glucose = sum(daily_averages.values()) / len(daily_averages)
            else:
                avg_glucose = 5.5
            
            for date in forecast_dates:
                forecast_data[date] = round(avg_glucose, 1)
            
            logger.info(f"Using default forecast due to parse error: {forecast_data}")
        
        except Exception as e:
            logger.error(f"Error extracting forecast: {e}", exc_info=True)
            
            # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            for date in forecast_dates:
                forecast_data[date] = 5.5

        # 10. –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ì–ù–û–ó–ê
        logger.info("Validating forecast data...")
        
        validated_forecast = {}
        for date in forecast_dates:
            if date in forecast_data:
                value = forecast_data[date]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (3-15 –º–º–æ–ª—å/–ª)
                if isinstance(value, (int, float)) and 3 <= value <= 15:
                    validated_forecast[date] = round(float(value), 1)
                else:
                    logger.warning(f"Invalid forecast value for {date}: {value}, using 5.5")
                    validated_forecast[date] = 5.5
            else:
                logger.warning(f"Missing forecast for {date}, using 5.5")
                validated_forecast[date] = 5.5
        
        logger.info(f"Validated forecast: {validated_forecast}")

        logger.info(f"‚úÖ Comprehensive analysis completed successfully for employee {employee.id}")
        logger.info(f"=" * 50)

        # 11. –í–û–ó–í–†–ê–©–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
        return {
            "analysis": analysis_text,
            "chart_data": validated_forecast
        }

    except Exception as e:
        logger.error(f"‚ùå CRITICAL ERROR in comprehensive analysis for employee {employee.id}")
        logger.error(f"Error type: {type(e).__name__}")
        logger.error(f"Error message: {str(e)}")
        logger.error(f"Full traceback:", exc_info=True)
        logger.error(f"=" * 50)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        now = timezone.now()
        error_forecast = {}
        for i in range(7):
            future_date = (now + datetime.timedelta(days=i+1)).strftime("%Y-%m-%d")
            error_forecast[future_date] = 5.5
        
        return {
            "analysis": (
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ OpenAI\n"
                "‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ\n"
                "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏\n\n"
                f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}\n"
                f"–î–µ—Ç–∞–ª–∏: {str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            ),
            "chart_data": error_forecast
        }